@page "/sites/create"
@using System.ComponentModel.DataAnnotations
@using CodeMonkeys.CMS.Public.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inherits BaseComponent<Create>
@inject UserManager<User> UserManager
@inject ISiteService SiteService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User, Admin")]

<div class="create-container">


    <div class="create-main-content">
        <aside class="create-toolbar">
            <tbody>
                @foreach (Site site in Sites ?? [])
                {
                    <tr>
                        <td style="font-weight: bold; text-decoration: underline;">@site.Name</td>
                        <td>
                            <a class="btn btn-success" href="/sites/@site.SiteId/edit">Edit</a>
                        </td>
                    </tr>
                }
            </tbody>
        </aside>

        <section class="create-preview">
            <h3>Create new Site</h3>

            <EditForm Model="Input" method="post" OnValidSubmit="HandleValidSubmit" FormName="createsite">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <StatusMessage Message="@ErrorMessage" />

                <div class="create-form-floating create-mb-3">
                    <InputText @bind-Value="Input.Name" class="create-form-control" autocomplete="name" aria-required="true" placeholder="Unique site name" />
                    <label for="name" class="create-form-label"></label>
                    <ValidationMessage For="() => Input.Name" class="create-text-danger" />
                </div>
                <div>
                    <button type="submit" class="create-w-100 create-btn create-btn-lg create-btn-primary">Create site</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new InputModel();

    private IEnumerable<Site> Sites = [];

    private string ErrorMessage { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        User? user = await GetCurrentUserAsync();

        if (user == null)
        {
            Logger.LogWarning("Authenticated User is not authenticated");
            return;
        }

        Sites = await SiteService.GetUserSitesAsync(user.Id);
    }



    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Input.Name))
        {
            ErrorMessage = "Name is required";
            return;
        }

        User? user = await GetCurrentUserAsync();
        if (user == null)
        {
            Logger.LogWarning("Authenticated User is not authenticated");
            return;
        }

        var site = new Site()
            {
                Name = Input.Name,
                CreatedDate = DateTime.Now,
                LastModifiedDate = DateTime.Now,
                CreatorId = user.Id
            };

        await SiteService.CreateSiteAsync(site);

        Navigation.NavigateTo($"sites/{site.SiteId}/webpages");
    }

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;
    }
}
