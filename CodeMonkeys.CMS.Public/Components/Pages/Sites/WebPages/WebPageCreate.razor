@page "/sites/{siteId:int}/webpages/create"
@using System.ComponentModel.DataAnnotations
@using CodeMonkeys.CMS.Public.Components.Account.Shared
@using CodeMonkeys.CMS.Public.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inherits BaseComponent<WebPageCreate>
@inject UserManager<User> UserManager
@inject IWebPageService WebPageService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User, Admin")]

<h3>Create new Page</h3>

<EditForm Model="Input" method="post" OnValidSubmit="HandleValidSubmit" FormName="createwebpage">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <StatusMessage Message="@ErrorMessage" />

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Title" class="form-control" autocomplete="name" aria-required="true" placeholder="Unique site name" />
        <label for="name" class="form-label">Page title</label>
        <ValidationMessage For="() => Input.Title" class="text-danger" />
    </div>
    <div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Create page</button>
    </div>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new InputModel();

    [Parameter]
    public int siteId { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Input.Title))
        {
            ErrorMessage = "Title is required";
            return;
        }

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state == null)
        {
            Logger.LogWarning("Authenticated User is not authenticated");
            ErrorMessage = "You are not authenticated";
            return;
        }

        var user = await UserManager.GetUserAsync(state.User);
        if (user == null)
        {
            Logger.LogWarning("Authenticated User is not authenticated");
            ErrorMessage = "You are not authenticated";
            return;
        }

        var page = new WebPage()
            {
                Title = Input.Title,
                CreatedDate = DateTime.Now,
                LastModifiedDate = DateTime.Now,
                SiteId = siteId,
                AuthorId = user.Id,

            };

        await WebPageService.CreateWebPageAsync(page);

        Navigation.NavigateTo($"sites/{siteId}/webpages/{page.WebPageId}/edit");
    }

    private sealed class InputModel
    {
        [Required]
        public string Title { get; set; } = string.Empty;
    }
}