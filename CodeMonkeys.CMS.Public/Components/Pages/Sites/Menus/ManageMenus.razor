@page "/sites/{siteId:int}/menus"
@inherits AuthenticationBaseComponent<ManageMenus>
@using CodeMonkeys.CMS.Public.Components.Account.Shared
@using CodeMonkeys.CMS.Public.Components.Shared.UI
@using CodeMonkeys.CMS.Public.Shared.Entities
@using CodeMonkeys.CMS.Public.Shared.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IMenuService MenuService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User, Admin")]



<UserViewer>
    <div>
        @if (Site != null)
        {
            <h2>Manage Menus for "@Site.Name"</h2>
            <!--Copied from WebPagesIndex and modified without necessarily understanding it.-->
            <button type="button" class="btn btn-primary" @onclick="async() => await OpenMenuDialogAsync()">Create new menu</button>

            if (!((Menus?.Any()) ?? false))
            {
                <div class="alert-info">
                    <p>There are no menus for this site yet. Click the button above to create a new menu.</p>
                </div>
            }
            else
            {
                <div class="menus-row mt-4">
                    @foreach (Menu menu in (Menus ?? new List<Menu>()))
                    {
                        <div class="menus-col-md-4 menus-mb-4">
                            <div class="menus-card h-100">
                                <div class="menus-card-header text-center font-weight-bold">
                                    @menu.Name
                                </div>
                                <div class="menus-card-body">
                                    <div class="menus-empty-box bg-light" style="height: 150px;">
                                        <!-- Additional content can go here -->
                                    </div>
                                </div>
                                <div class="menus-card-actions">
                                    <button class="btn btn-primary" @onclick="async () => await OpenMenuDialogAsync(menu.MenuId)">Rename menu</button>
                                    <button class="btn btn-danger" @onclick="async () => await OpenDeleteMenuDialogAsync(menu.MenuId)">Delete menu</button>
                                    <!--
                                    <button class="btn btn-primary" @onclick="async () => await AddOrUpdatePageAsync(webPage.WebPageId)">Edit page title</button>
                                    <button class="btn btn-secondary" @onclick="async () => await EditContentsAsync(webPage.WebPageId)">Edit contents</button>
                                    <button class="btn btn-danger" @onclick="async () => await DeletePageAsync(webPage.WebPageId)">Delete</button>
                                    <a class="btn btn-secondary" href="/content/@(webPage.WebPageId)">Go to page</a>
                                    -->
                                </div>
                                <div class="menus-card-footer text-muted">
                                    <div class="container">
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
    <ConfirmationDialog @ref="MenuDialog" Title="@MenuDialogTitle" ConfirmationButtonText=@MenuDialogConfirmationText CancelButtonText="Cancel" OnCancel="() => MenuDialog.Hide()" OnConfirm="SaveMenuDialogContents">
        <EditForm Model="@menuModel">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <StatusMessage Message="@ErrorMessage" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="menuModel.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="Menu name" />
                <label for="name" class="form-label">Menu Name</label>
                <ValidationMessage For="() => menuModel.Name" class="text-danger" />
            </div>
        </EditForm>
    </ConfirmationDialog>

    <ConfirmationDialog @ref="MenuDeleteDialog" Title="Delete Menu" ConfirmationButtonText="Delete" CancelButtonText="Cancel" OnCancel="() => MenuDeleteDialog.Hide()" OnConfirm="DeleteMenu">
        Are you sure you want to delete the menu @(menuToDelete?.Name ?? "")?
    </ConfirmationDialog>

</UserViewer>

@code {
    [Parameter]
    public int siteId { get; set; }
    public Site? Site { get; set; } // Initialized with GetUserSiteAsync, does not actually contain the menus
    public List<Menu>? Menus { get; set; }
    private ConfirmationDialog? MenuDialog { get; set; }
    private ConfirmationDialog? MenuDeleteDialog { get; set; }
    private string MenuDialogConfirmationText { get; set; }
    private string MenuDialogTitle { get; set; }
    private MenuModel menuModel = new();
    private Menu menuToDelete;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Site = await SiteService.GetUserSiteAsync(User!.Id, siteId);

        if (Site == null)
        {
            Logger.LogWarning($"Site for user with ID '{User!.Id}' not found");
        }
        Menus = (await MenuService.GetMenusBySiteIdAsync(siteId)).ToList();
    }

    public Task OpenMenuDialogAsync(int? menuId = null)
    {
        if (menuId == null)
        {
            menuModel = new();
            MenuDialogTitle = "Add Menu";
            MenuDialogConfirmationText = "Add";
        }
        else
        {
            Menu? menu = Menus.Where(m => m.MenuId == menuId).FirstOrDefault();
            if (menu == null)
            {
                ErrorMessage = "Page not found";
                return Task.CompletedTask;
            }
            menuModel = new()
                {
                    MenuID = menuId,
                    Name = menu.Name
                };
            MenuDialogTitle = "Edit Menu";
            MenuDialogConfirmationText = "Update";
        }

        MenuDialog.Show();
        return Task.CompletedTask;
    }

    public async Task SaveMenuDialogContents()
    {
        if (menuModel.MenuID == null)
        {
            Menu menu = await MenuService.CreateMenuAsync(siteId, menuModel.Name);
            Menus.Add(menu);
        }
        else
        {
            Menu? menu = Menus.Where(m => m.MenuId == menuModel.MenuID).FirstOrDefault();
            if (menu == null)
            {
                ErrorMessage = "Menu not found";
                return;
            }
            menu.Name = menuModel.Name;
            await MenuService.UpdateMenuAsync(menu);
        }
    }

    public Task OpenDeleteMenuDialogAsync(int menuId)
    {
        Menu? menu = Menus.Where(m => m.MenuId == menuId).FirstOrDefault();
        if (menu == null)
        {
            ErrorMessage = "Menu not found";
            return Task.CompletedTask;
        }
        menuToDelete = menu;
        MenuDeleteDialog.Show();
        return Task.CompletedTask;
    }

    public async Task DeleteMenu()
    {
        await MenuService.DeleteMenuAsync(menuToDelete.MenuId);
        Menus.RemoveAll(m => m.MenuId == menuToDelete.MenuId);
        MenuDeleteDialog.Hide();
    }


    protected sealed class MenuModel
    {
        public int? MenuID { get; set; } = null;
        public string Name { get; set; } = string.Empty;
    }
}