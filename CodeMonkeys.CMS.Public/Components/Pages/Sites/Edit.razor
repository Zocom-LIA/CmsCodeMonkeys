@page "/sites/{siteId:int}/edit"
@using System.ComponentModel.DataAnnotations
@using CodeMonkeys.CMS.Public.Components.Account.Shared
@using CodeMonkeys.CMS.Public.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inherits BaseComponent<Create>
@inject UserManager<User> UserManager
@inject ISiteService SiteService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User, Admin")]

<h3>Edit Site</h3>

<EditForm Model="Input" method="post" OnValidSubmit="HandleValidSubmit" FormName="createsite">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <StatusMessage Message="@ErrorMessage" />

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="Unique site name" />
        <label for="name" class="form-label">Site Name</label>
        <ValidationMessage For="() => Input.Name" class="text-danger" />
    </div>
    <div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Edit site</button>
    </div>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new InputModel();

    [Parameter]
    public int siteId { get; set; }
    public Site? Site { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        User? user = await GetCurrentUserAsync();
        if (user == null)
        {
            Logger.LogWarning("Authenticated User is not authenticated");
            return;
        }

        Site = await SiteService.GetUserSiteAsync(user.Id, siteId);
        if (Site == null)
        {
            Logger.LogWarning("Site not found");
            ErrorMessage = "There is no such site available to edit";
        }

        Input.Name = Site.Name;
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Input.Name))
        {
            ErrorMessage = "Name is required";
            return;
        }

        User? user = await GetCurrentUserAsync();
        if (user == null)
        {
            Logger.LogWarning("Authenticated User is not authenticated");
            return;
        }

        Site ??= await SiteService.GetUserSiteAsync(user.Id, siteId);

        Site.Name = Input.Name;
        Site.LastModifiedDate = DateTime.Now;

        await SiteService.UpdateSiteAsync(Site);

        Navigation.NavigateTo($"sites/{siteId}/webpages");
    }

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;
    }
}