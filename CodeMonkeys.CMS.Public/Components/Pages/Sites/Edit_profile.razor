@page "/edit_profile"
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@rendermode InteractiveServer


<PageTitle>Edit Profile</PageTitle>

@if (user != null)
{
    <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Ändra användarnamn -->
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="user.UserName" />
        </div>

        <!-- Ändra telefonnummer -->
        <div class="form-group">
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="user.PhoneNumber" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-success">@statusMessage</div>
    }

    <!-- Sektion för att ändra e-post -->
    <h3>Change Email</h3>
    <EditForm Model="emailModel" OnValidSubmit="HandleEmailChange">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="newEmail">New Email</label>
            <InputText id="newEmail" class="form-control" @bind-Value="emailModel.NewEmail" />
        </div>

        <button type="submit" class="btn btn-primary">Change Email</button>

        <AntiforgeryToken />
    </EditForm>

    <!-- Sektion för att ändra lösenord -->
    <h3>Change Password</h3>
    <EditForm Model="passwordModel" OnValidSubmit="HandlePasswordChange">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="currentPassword">Current Password</label>
            <InputText type="password" id="currentPassword" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
        </div>

        <div class="form-group">
            <label for="newPassword">New Password</label>
            <InputText type="password" id="newPassword" class="form-control" @bind-Value="passwordModel.NewPassword" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
        </div>

        <button type="submit" class="btn btn-primary">Change Password</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {

    // skriv över cookien med en ny som är tom, dvs sätt användaren till logout
    private User user = new();
    private string statusMessage;

    private EmailModel emailModel = new();
    private PasswordModel passwordModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Hämta den aktuella användaren
        var currentUser = await UserManager.GetUserAsync(SignInManager.Context.User);
        if (currentUser != null)
        {
            user = currentUser;
        }
    }

    // Hantera profiländringar (användarnamn och telefonnummer)
    private async Task HandleValidSubmit()
    {
        var result = await UserManager.UpdateAsync(user);
        if (result.Succeeded)
        {
            statusMessage = "Profile updated successfully!";
            await SignInManager.RefreshSignInAsync(user);

            // Refresh
            NavigationManager.NavigateTo("/sites");
        }
        else
        {
            statusMessage = "Error updating profile.";
        }
    }

    private async Task HandleEmailChange()
    {
        if (string.IsNullOrEmpty(emailModel.NewEmail))
        {
            statusMessage = "Email is required.";
            return;
        }

        var code = await UserManager.GenerateChangeEmailTokenAsync(user, emailModel.NewEmail);
        var emailChangeResult = await UserManager.ChangeEmailAsync(user, emailModel.NewEmail, code);

        if (emailChangeResult.Succeeded)
        {
            statusMessage = "Email changed successfully!";

            // Försök att uppdatera användarnamn till den nya e-postadressen
            var userNameResult = await UserManager.SetUserNameAsync(user, emailModel.NewEmail);

            if (userNameResult.Succeeded)
            {
                // Logga ut användaren och visa ett popup-meddelande
                await SignInManager.SignOutAsync();

                // Visa popup-meddelande (kan implementeras via JS eller som en komponent)
                await ShowPopupMessage("Email changed", "Your email has been changed successfully. You will be logged out now to update your session.");

                // Omdirigera användaren till inloggningssidan
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                statusMessage = "Email was changed, but there was an error updating the username.";
            }
        }
        else
        {
            statusMessage = "Error changing email.";
        }
    }

    // Popup-meddelande (implementera via JS interop eller en komponent)
    private async Task ShowPopupMessage(string title, string message)
    {
        // Anropa JavaScript via JS interop för att visa popup, eller använd en Blazor-komponent
        await JS.InvokeVoidAsync("alert", $"{title}: {message}");
    }




    // Hantera lösenordsändring
    private async Task HandlePasswordChange()
    {
        var result = await UserManager.ChangePasswordAsync(user, passwordModel.CurrentPassword, passwordModel.NewPassword);

        if (result.Succeeded)
        {
            statusMessage = "Password changed successfully!";
            await SignInManager.RefreshSignInAsync(user);

            // Refresh
            NavigationManager.NavigateTo("/sites");
        }
        else
        {
            statusMessage = "Error changing password.";
        }
    }

    // Modeller för e-post och lösenord
    private class EmailModel
    {
        [Required]
        [EmailAddress]
        public string NewEmail { get; set; } = "";
    }

    private class PasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
