@page "/userPages/{SiteId:int}/{PageName}"
@inherits ContentBaseComponent<ShowUserPage>
@using CodeMonkeys.CMS.Public.Components.Shared
@using CodeMonkeys.CMS.Public.Shared.Entities
@using CodeMonkeys.CMS.Public.Shared.Repository
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<div class="page-layout">
    <!-- Content Area -->
    <div class="content-area">
        @foreach (var cell in GridCells)
        {
            <div @ondragover:preventDefault="true"
                 @ondragenter="(e) => OnDragEnter(cell)"
                 @ondragleave="(e) => OnDragLeave(cell)"
                 @ondrop="(e) => OnDropHandler(e, cell)">
                <GridCell Element="cell.Element" OnClick="(element) => EditElement(element)" />
            </div>
        }
    </div>

    <!-- Toolbar Area -->
    <div class="toolbar">
        <div class="toolbar-header">
            <h3>Verktygslåda</h3>
        </div>
        <div class="toolbar-content">
            @if (selectedElement != null)
            {
                <div class="element-editor">
                    @if (IsTextElement(selectedElement))
                    {
                        <label for="body">Text:</label>
                        <input type="text" id="body" @bind="selectedElement.Body" />

                        <label for="fontSize">Textstorlek:</label>
                        <input type="number" id="fontSize" @bind="selectedElement.FontSize" />

                        <label for="color">Färg:</label>
                        <input type="color" id="color" @bind="selectedElement.Color" />

                        <label for="fontFamily">Typsnitt:</label>
                        <select id="fontFamily" @bind="selectedElement.FontFamily">
                            <option value="Arial">Arial</option>
                            <option value="Times New Roman">Times New Roman</option>
                            <option value="Verdana">Verdana</option>
                            <option value="Georgia">Georgia</option>
                        </select>
                    }
                    else if (IsColorBlockElement(selectedElement))
                    {
                        <label for="color">Färg:</label>
                        <input type="color" id="color" @bind="selectedElement.Color" />
                    }

                    <button @onclick="SaveElementChanges">Spara ändringar</button>
                </div>
            }
            else
            {
                <div class="draggable" draggable="true" @ondragstart="OnDragStartText">
                    Text Element
                </div>
                <div class="draggable" draggable="true" @ondragstart="OnDragStartColorBlock">
                    Color Block
                </div>
            }
        </div>
    </div>
</div>

<script>
    window.dragDropInterop = {
        setData: function (event, data) {
            event.dataTransfer.setData("text", data);
            console.log("Set data:", data);
        },
        getData: function (event) {
            const data = event.dataTransfer.getData("text");
            console.log("Get data:", data);
            return data;
        }
    };
</script>

@code {
    [Parameter] public int SiteId { get; set; }
    [Parameter] public string? PageName { get; set; }

    private string? DraggedElementType { get; set; }
    private GridElement? selectedElement { get; set; }

    public class GridCell
    {
        public GridElement? Element { get; set; }
        public bool IsDraggedOver { get; set; }
    }

    private List<GridCell> GridCells { get; set; } = new List<GridCell>();

    protected override void OnInitialized()
    {
        InitializeGrid(5);
    }

    private void InitializeGrid(int cellCount)
    {
        GridCells = new List<GridCell>();
        for (int i = 0; i < cellCount; i++)
        {
            GridCells.Add(new GridCell());
            Console.WriteLine("grid automated");
        }
    }

    private void EditElement(GridElement? element)
    {
        selectedElement = element;
    }

    private async Task OnDropHandler(DragEventArgs e, GridCell cell)
    {
        var elementType = await JSRuntime.InvokeAsync<string>("dragDropInterop.getData", e);

        if (elementType == "Text")
        {
            cell.Element = CreateTextElement();
        }
        else if (elementType == "ColorBlock")
        {
            cell.Element = CreateColorBlockElement();
        }



        DraggedElementType = null;
        cell.IsDraggedOver = false;
        StateHasChanged();
    }

    private GridElement CreateTextElement() => new GridElement
        {
            Type = "Text",
            Body = "Ny Text",
            Color = "#000000",
            FontSize = "16",
            FontFamily = "Arial"
        };

    private GridElement CreateColorBlockElement() => new GridElement
        {
            Type = "ColorBlock",
            Color = "#ff0000"
        };

    private bool IsTextElement(GridElement? element) => element?.Type == "Text";
    private bool IsColorBlockElement(GridElement? element) => element?.Type == "ColorBlock";

    private async Task OnDragStartText(DragEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("dragDropInterop.setData", e, "Text");
        DraggedElementType = "Text";
    }

    private async Task OnDragStartColorBlock(DragEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("dragDropInterop.setData", e, "ColorBlock");
        DraggedElementType = "ColorBlock";
    }

    private void OnDragEnter(GridCell cell)
    {
        cell.IsDraggedOver = true;
        StateHasChanged();
    }

    private void OnDragLeave(GridCell cell)
    {
        cell.IsDraggedOver = false;
        StateHasChanged();
    }

    private async Task SaveElementChanges()
    {
        selectedElement = null;
        StateHasChanged();
    }
}
