@page "/userPages/{SiteId:int}/{PageName}"
@inherits ContentBaseComponent<ShowUserPage>
@using CodeMonkeys.CMS.Public.Components.Shared
@using CodeMonkeys.CMS.Public.Shared.Entities
@using CodeMonkeys.CMS.Public.Shared.Repository
@using Microsoft.AspNetCore.Components.Web
@using CodeMonkeys.CMS.Public.Components.Pages

<PageTitle>@GetPageTitle()</PageTitle>

<div class="page-layout">
    <!-- Content Area -->
    <div class="content-area">
        @foreach (var cell in GridCells)
        {
            <GridCell Element="cell.Element"
                      OnClick="(element) => EditElement(element)"
                      OnDrop="(e) => OnDropHandler(e, cell)" />
        }
    </div>

    <!-- Toolbar Area -->
    <div class="toolbar">
        <div class="toolbar-header">
            <h3>Verktygslåda</h3>
        </div>
        <div class="toolbar-content">
            @if (selectedElement != null)
            {
                <div class="element-editor">
                    @if (IsTextElement(selectedElement))
                    {
                        RenderTextElementEditor();
                    }
                    else if (IsColorBlockElement(selectedElement))
                    {
                        RenderColorBlockEditor();
                    }

                    <button @onclick="SaveElementChanges">Spara ändringar</button>
                </div>
            }
            else
            {
                RenderToolbarItems();
            }
        </div>
    </div>
</div>

@code {
    private Site? Site { get; set; }
    private WebPage? WebPage { get; set; }
    private GridElement? selectedElement { get; set; }

    [Parameter] public required int SiteId { get; set; }
    [Parameter] public string? PageName { get; set; } = null;
    [Inject] public required ISiteRepository Repository { get; set; }
    [Inject] private IJSRuntime JS { get; set; } = default!;

    public class GridCell
    {
        public GridElement? Element { get; set; }
    }

    public class GridElement
    {
        public string? Type { get; set; }
        public string? Body { get; set; }
        public string? Color { get; set; }
        public string? FontSize { get; set; }
        public string? FontFamily { get; set; }
    }

    private List<GridCell> GridCells { get; set; } = new List<GridCell>();
    private string? DraggedElementType { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadPageData();
        InitializeGrid(25); // Initiera rutnätet med t.ex. 25 celler (5x5)
        await LoadGridState();
    }

    private async Task LoadPageData()
    {
        Site = await Repository.GetSiteWithContentsAsync(SiteId);
        if (Site == null)
        {
            WebPage = NoSuchSitePage(SiteId);
        }
        else if (PageName == null)
        {
            WebPage = Site.LandingPage ?? NoLandingPageConfiguredPage(SiteId);
        }
        else
        {
            WebPage = FindPage(Site, PageName) ?? NoSuchPagePage(PageName);
        }
    }

    private void InitializeGrid(int cellCount)
    {
        GridCells = new List<GridCell>();
        for (int i = 0; i < cellCount; i++)
        {
            GridCells.Add(new GridCell());
        }
    }

    private string GetPageTitle()
    {
        return WebPage?.Title ?? "Untitled";
    }

    private bool IsTextElement(GridElement? element) => element?.Type == "Text";
    private bool IsColorBlockElement(GridElement? element) => element?.Type == "ColorBlock";

    private void RenderTextElementEditor()
    {
        <label for="body">Text:</label>
        <input type="text" id="body" @bind="selectedElement.Body" />

        <label for="fontSize">Textstorlek:</label>
        <input type="number" id="fontSize" @bind="selectedElement.FontSize" />

        <label for="color">Färg:</label>
        <input type="color" id="color" @bind="selectedElement.Color" />

        <label for="fontFamily">Typsnitt:</label>
        <select id="fontFamily" @bind="selectedElement.FontFamily">
            <option value="Arial">Arial</option>
            <option value="Times New Roman">Times New Roman</option>
            <option value="Verdana">Verdana</option>
            <option value="Georgia">Georgia</option>
        </select>
    }

    private void RenderColorBlockEditor()
    {
        <label for="color">Färg:</label>
        <input type="color" id="color" @bind="selectedElement.Color" />
    }

    private void RenderToolbarItems()
    {
        <div class="draggable" draggable="true" @ondragstart="OnDragStartText">
            Text Element
        </div>
        <div class="draggable" draggable="true" @ondragstart="OnDragStartColorBlock">
            Color Block
        </div>
    }

    private void OnDragStartText(DragEventArgs e)
    {
        e.DataTransfer.EffectAllowed = "move";
        DraggedElementType = "Text";
    }

    private void OnDragStartColorBlock(DragEventArgs e)
    {
        e.DataTransfer.EffectAllowed = "move";
        DraggedElementType = "ColorBlock";
    }

    private async void OnDropHandler(DragEventArgs e, GridCell cell)
    {
        if (DraggedElementType == "Text")
        {
            cell.Element = CreateTextElement();
        }
        else if (DraggedElementType == "ColorBlock")
        {
            cell.Element = CreateColorBlockElement();
        }

        DraggedElementType = null;
        await SaveGridState();
        StateHasChanged();
    }

    private GridElement CreateTextElement() => new GridElement
    {
        Type = "Text",
        Body = "Ny Text",
        Color = "#000000",
        FontSize = "16",
        FontFamily = "Arial"
    };

    private GridElement CreateColorBlockElement() => new GridElement
    {
        Type = "ColorBlock",
        Color = "#ff0000"
    };

    private void EditElement(GridElement? element)
    {
        selectedElement = element;
    }

    private async void SaveElementChanges()
    {
        await SaveGridState();
        selectedElement = null;
        StateHasChanged();
    }

    private WebPage? FindPage(Site site, string pageName)
    {
        if (int.TryParse(pageName, out int pageNumber))
        {
            return site.Pages.FirstOrDefault(p => p.WebPageId == pageNumber);
        }

        return site.Pages.FirstOrDefault(p => p.Title == pageName);
    }

    private WebPage NoSuchSitePage(int siteId) => new WebPage
    {
        Title = "No such site",
        Contents = new List<Content> { new Content { Body = $"No such site: {siteId}" } }
    };

    private WebPage NoLandingPageConfiguredPage(int siteId) => new WebPage
    {
        Title = "No landing page configured",
        Contents = new List<Content> { new Content { Body = $"No landing page configured for site: {siteId}" } }
    };

    private WebPage NoSuchPagePage(string pageName) => new WebPage
    {
        Title = "No such page",
        Contents = new List<Content> { new Content { Body = $"No such page: {pageName}" } }
    };

    private async Task SaveGridState()
    {
        var gridState = GridCells.Select(cell => cell.Element).ToList();
        var json = System.Text.Json.JsonSerializer.Serialize(gridState);
        await JS.InvokeVoidAsync("localStorage.setItem", "gridState", json);
    }

    private async Task LoadGridState()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "gridState");
        if (!string.IsNullOrEmpty(json))
        {
            var gridState = System.Text.Json.JsonSerializer.Deserialize<List<GridElement>>(json);
            for (int i = 0; i < gridState.Count; i++)
            {
                if (i < GridCells.Count)
                {
                    GridCells[i].Element = gridState[i];
                }
            }
        }
    }
  }
}
