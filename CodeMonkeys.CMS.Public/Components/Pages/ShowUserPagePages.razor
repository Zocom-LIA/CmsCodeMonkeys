@page "/userPages/{SiteId:int}/{PageName}"
@inherits ContentBaseComponent<ShowUserPage>
@rendermode InteractiveServer
@using CodeMonkeys.CMS.Public.Components.Shared
@using CodeMonkeys.CMS.Public.Components.Account.Shared
@using CodeMonkeys.CMS.Public.Shared.Entities
@using CodeMonkeys.CMS.Public.Shared.Repository
@inject IJSRuntime JSRuntime

<PageTitle>@WebPage?.Title</PageTitle>

<div class="page-layout">
    <!-- Content Area -->
    <div class="content-area">
        @foreach (var cell in GridCells)
        {
            <div class="grid-cell"
                 @ondragover="OnDragOver"
                 @ondrop="(e) => OnDrop(e, cell)"
                 @onclick="() => EditElement(cell.Element)">
                @if (cell.Element != null)
                {
                    @if (cell.Element.Type == "Text")
                    {
                        <span style="color:@cell.Element.Color; font-size:@(cell.Element.FontSize)px; font-family:@cell.Element.FontFamily">
                            @cell.Element.Body
                        </span>
                    }
                    else if (cell.Element.Type == "ColorBlock")
                    {
                        <div style="background-color:@cell.Element.Color; width:100%; height:100%;"></div>
                    }
                }
            </div>
        }
    </div>

    <!-- Toolbar Area -->
    <div class="toolbar">
        <div class="toolbar-header">
            <h3>Verktygslåda</h3>
        </div>
        <div class="toolbar-content">
            @if (selectedElement != null)
            {
                <div class="element-editor">
                    @if (selectedElement.Type == "Text")
                    {
                        <label for="body">Text:</label>
                        <input type="text" id="body" @bind="selectedElement.Body" />

                        <label for="fontSize">Textstorlek:</label>
                        <input type="number" id="fontSize" @bind="selectedElement.FontSize" />

                        <label for="color">Färg:</label>
                        <input type="color" id="color" @bind="selectedElement.Color" />

                        <label for="fontFamily">Typsnitt:</label>
                        <select id="fontFamily" @bind="selectedElement.FontFamily">
                            <option value="Arial">Arial</option>
                            <option value="Times New Roman">Times New Roman</option>
                            <option value="Verdana">Verdana</option>
                            <option value="Georgia">Georgia</option>
                        </select>
                    }
                    else if (selectedElement.Type == "ColorBlock")
                    {
                        <label for="color">Färg:</label>
                        <input type="color" id="color" @bind="selectedElement.Color" />
                    }

                    <button @onclick="SaveElementChanges">Spara ändringar</button>
                </div>
            }
            else
            {
                <!-- Dragbara element -->
                <div class="draggable" draggable="true" @ondragstart="OnDragStartTextElement">
                    Text Element
                </div>
                <div class="draggable" draggable="true" @ondragstart="OnDragStartColorBlock">
                    Color Block
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Site? Site { get; set; }
    private WebPage? WebPage { get; set; }
    private GridElement? selectedElement { get; set; }

    private bool isRendered = false; // Kontroll för att säkerställa att OnAfterRenderAsync inte körs för tidigt

    [Parameter] public required int SiteId { get; set; }
    [Parameter] public string? PageName { get; set; } = null;
    [Inject] public required ISiteRepository Repository { get; set; }

    public class GridCell
    {
        public GridElement? Element { get; set; }
    }

    public class GridElement
    {
        public string? Type { get; set; }
        public string? Body { get; set; }
        public string? Color { get; set; }
        public string? FontSize { get; set; }
        public string? FontFamily { get; set; }
    }

    private List<GridCell> GridCells { get; set; } = new List<GridCell>();

    protected async override Task OnInitializedAsync()
    {
        SetLoading(true);
        await base.OnInitializedAsync();
        Site = await Repository.GetSiteWithContentsAsync(SiteId);
        if (Site == null)
        {
            SetError($"No such site: {SiteId}");
            WebPage = NoSuchSitePage(SiteId);
            SetLoading(false);
            return;
        }
        if (PageName == null)
        {
            WebPage = Site.LandingPage ?? NoLandingPageConfiguredPage(SiteId);
            SetLoading(false);
            return;
        }
        WebPage = FindPage(Site, PageName) ?? NoSuchPagePage(PageName);
        SetLoading(false);

        // Initiera rutnätet med t.ex. 25 celler (5x5)
        for (int i = 0; i < 25; i++)
        {
            GridCells.Add(new GridCell());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Det är nu säkert att utföra JS-anrop
            await LoadGridState();
            isRendered = true;
            StateHasChanged();
        }
    }

    async Task OnDragStartTextElement(DragEventArgs e)
    {
        if (isRendered)
        {
            await OnDragStart(e, "Text");
        }
    }

    async Task OnDragStartColorBlock(DragEventArgs e)
    {
        if (isRendered)
        {
            await OnDragStart(e, "ColorBlock");
        }
    }

    async Task OnDragStart(DragEventArgs e, string elementType)
    {
        e.DataTransfer.EffectAllowed = "move";
        await JSRuntime.InvokeVoidAsync("dragDropInterop.setData", e, "text/plain", elementType);
    }

    async Task OnDragOver(DragEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("dragDropInterop.preventDefault", e);
    }

    async void OnDrop(DragEventArgs e, GridCell cell)
    {
        await JSRuntime.InvokeVoidAsync("dragDropInterop.preventDefault", e);
        var elementType = await JSRuntime.InvokeAsync<string>("dragDropInterop.getData", e, "text/plain");

        if (elementType == "Text")
        {
            var newElement = new GridElement
                {
                    Type = "Text",
                    Body = "Ny Text",
                    Color = "#000000",
                    FontSize = "16",
                    FontFamily = "Arial"
                };
            cell.Element = newElement;
        }
        else if (elementType == "ColorBlock")
        {
            var newElement = new GridElement
                {
                    Type = "ColorBlock",
                    Color = "#ff0000"
                };
            cell.Element = newElement;
        }

        await SaveGridState();
        StateHasChanged();
    }

    private void EditElement(GridElement? element)
    {
        selectedElement = element;
    }

    async void SaveElementChanges()
    {
        await SaveGridState();
        selectedElement = null; // Döljer redigeringspanelen efter sparande
        StateHasChanged();
    }

    private WebPage? FindPage(Site site, string pageName) => FindPageByNumber(site, pageName) ?? FindPageByTitle(site, pageName);

    private WebPage? FindPageByTitle(Site site, string pageName) => site.Pages.FirstOrDefault(p => p.Title == pageName);

    private WebPage? FindPageByNumber(Site site, string pageName)
    {
        int pageNumber;
        bool isInt = int.TryParse(pageName, out pageNumber);
        if (!isInt) return null;
        return site.Pages.FirstOrDefault(p => p.WebPageId == pageNumber);
    }

    private WebPage NoSuchSitePage(int SiteName)
    {
        return new WebPage()
            {
                Title = "No such site",
                Contents = new List<Content>
            {
                new Content
                {
                    Body = $"No such site: {SiteName}"
                }
            }
            };
    }

    private WebPage NoLandingPageConfiguredPage(int SiteName)
    {
        return new WebPage()
            {
                Title = "No landing page configured",
                Contents = new List<Content>
            {
                new Content
                {
                    Body = $"No landing page configured for site: {SiteName}"
                }
            }
            };
    }

    private WebPage NoSuchPagePage(string PageName)
    {
        return new WebPage()
            {
                Title = "No such page",
                Contents = new List<Content>
            {
                new Content
                {
                    Body = $"No such page: {PageName}"
                }
            }
            };
    }

    async Task SaveGridState()
    {
        var gridState = GridCells.Select(cell => cell.Element).ToList();
        var json = System.Text.Json.JsonSerializer.Serialize(gridState);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "gridState", json);
    }

    async Task LoadGridState()
    {
        var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "gridState");
        if (!string.IsNullOrEmpty(json))
        {
            var gridState = System.Text.Json.JsonSerializer.Deserialize<List<GridElement>>(json);
            for (int i = 0; i < gridState.Count; i++)
            {
                if (i < GridCells.Count)
                {
                    GridCells[i].Element = gridState[i];
                }
            }
        }
    }
}
