@page "/Account/Login"
@inherits BaseComponent<Login>

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CodeMonkeys.CMS.Public.Shared.Data
@using CodeMonkeys.CMS.Public.Shared.Entities

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<User> UserManager

<PageTitle>Log in</PageTitle>


<div class="row">
    <div>
        <section class="d-flex justify-content-center">
            <div class="main">
            <input type="checkbox" id="chk" aria-hidden="true">

            <div class="Login">
            <StatusMessage Message="@errorMessage" />
            
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <label for="chk" aria-hidden="true">Login</label>  
                <ValidationSummary class="text-danger mb-4" role="alert" />
                <div class="form-floating mb-3">
                    <InputText  @bind-Value="Input.Email"  class="Inputen" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    
                    <!-- <ValidationMessage For="() => Input.Email" class="text-danger" /> -->
                </div>
                
                
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="Inputen" autocomplete="current-password" aria-required="true" placeholder="password" />
                    
                    <!-- <ValidationMessage For="() => Input.Password" class="text-danger" /> -->
                </div>
                                
                
                  
                <div>
                    <button type="submit" class="btn btn-lg btn-primary">Log in</button>
                    <p class="text-center">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                    </p>
                </div>


                <div class="m-lg-4">
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                <p>
                   <label for="chk" class="regy" style="cursor: pointer;">Register as a new user</label>
                </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
            </div>
                <div class="signup">
                    
                        <label class="Signupen" for="chk" aria-hidden="true">Sign up</label>
                        <Register />
                        <!-- <input type="text" name="txt" placeholder="User name" required="" />
                        <input type="email" name="email" placeholder="Email" required="" />
                        <input type="number" name="broj" placeholder="BrojTelefona" required="" />
                        <input type="password" name="pswd" placeholder="Password" required="" />
                        <button type="submit">Sign up</button> -->
                   

                    
                </div>

               

                
   
        </div>
        </section>
    </div>
   
</div>

@code {
   private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            User? user = await UserManager.FindByEmailAsync(Input.Email);

            if (user == null)
            {
                Logger.LogInformation($"Logged in user with email '{Input.Email}' not found by UserManager.");
                errorMessage = "Error: Invalid login attempt.";
                return;
            }

            if (await UserManager.IsInRoleAsync(user, "Admin") || await UserManager.IsInRoleAsync(user, "User"))
            {
                
                if (string.IsNullOrEmpty(ReturnUrl)){
                RedirectManager.RedirectTo("/");
                } else {
                RedirectManager.RedirectTo(ReturnUrl);
                }

                

            }
            else
            {
                Logger.LogInformation($"User '{Input.Email}' is not in either any role.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    



}
