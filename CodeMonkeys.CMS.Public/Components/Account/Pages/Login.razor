@page "/Account/Login"
@inherits BaseComponent<Login>

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CodeMonkeys.CMS.Public.Shared.Data
@using CodeMonkeys.CMS.Public.Shared.Entities

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<User> UserManager

<PageTitle>Log in</PageTitle>

<h1 class="text-center">Log in</h1>
<div class="row justify-content-center">
    <div class="col-md-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" placeholder="name@example.com" autocomplete="username" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" placeholder="password" autocomplete="current-password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label class="form-check-label">Remember me</label>
                </div>

                <button type="submit" class="btn btn-primary w-100">Log in</button>

                <div class="text-center mt-3">
                    <a href="Account/ForgotPassword">Forgot your password?</a><br />
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a><br />
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </div>
            </EditForm>
        </section>
    </div>

    <div class="col-md-6">
        <section>
            <h3>Log in with an external service</h3>
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private InputModel Input { get; set; } = new();

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme); // Ensure clean login process
        }
    }

    private async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var user = await UserManager.FindByEmailAsync(Input.Email);
            
            if (user == null)
            {
                Logger.LogWarning($"User with email '{Input.Email}' not found.");
                errorMessage = "Error: Invalid login attempt.";
                return;
            }

            if (await UserManager.IsInRoleAsync(user, "Admin") || await UserManager.IsInRoleAsync(user, "User"))
            {
                RedirectManager.RedirectTo(string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl);
            }
            else
            {
                Logger.LogWarning($"User '{Input.Email}' is not in a valid role.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required, DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
