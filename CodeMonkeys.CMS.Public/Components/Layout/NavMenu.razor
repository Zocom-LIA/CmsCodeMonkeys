@implements IDisposable
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using CodeMonkeys.CMS.Public.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Collections.Immutable

<style>
    html {
        scroll-padding-top: 92px;
        overflow-y: scroll; /* Justera denna höjd baserat på höjden av din navigeringsmeny */
    }

    [id]::before {
        display: block;
        height: 25px; /* Justera denna höjd baserat på din navigeringsmeny */
        margin-top: -30px; /* Samma som höjden ovan */
    }
</style>
<header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="#Home">CODE MONKEYS</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mr-auto">
                    <AuthorizeView>
                        <Authorized>
                            @foreach (NavMenuEntry entry in ConfigurationService.NavMenuEntries)
                            {
                                if (entry.ShowWhenAuthorized)
                                {

                                    <li class="nav-item">
                                        <NavLink class="nav-link" href=@entry.Href style="color: white;">
                                            @if (entry.EmptySpanClass != null)
                                            {
                                                <span class=@entry.EmptySpanClass aria-hidden="true"></span>
                                            }
                                            @entry.LinkText
                                        </NavLink>
                                    </li>
                                }
                            }
                        </Authorized>
                        <NotAuthorized>
                            @foreach (NavMenuEntry entry in ConfigurationService.NavMenuEntries)
                            {
                                if (entry.ShowWhenUnauthorized)
                                {

                                    <li class="nav-item">
                                        <NavLink class="nav-link" href=@entry.Href style="color: white;">
                                            @if (entry.EmptySpanClass != null)
                                            {
                                                <span class=@entry.EmptySpanClass aria-hidden="true"></span>
                                            }
                                            @entry.LinkText
                                        </NavLink>
                                    </li>
                                }
                            }
                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
                <ul class="navbar-nav">
                    <AuthorizeView>
                        <Authorized>
                            <li class="nav-item">
                                <form action="Account/Logout" method="post" id="logout-form" class="form-inline">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                    <button type="submit" class="btn btn-link nav-link text-white">
                                        Logout <span class="bi bi-box-arrow-right" aria-hidden="true"></span>
                                    </button>
                                </form>
                            </li>
                        </Authorized>
                    </AuthorizeView>
                </ul>
            </div>
        </div>
    </nav>
</header>
@code {
    [Inject] private MenuConfigurationService ConfigurationService { get; set; }
    private static ImmutableList<NavMenuEntry> DefaultEntries { get; set; } =
        new List<NavMenuEntry>()
        {
            new NavMenuEntry()
            {
                Href = "/",
                LinkText = "Home",
                ShowWhenUnauthorized = false
            },
            new NavMenuEntry()
            {
                Href = "sites",
                LinkText = "Site Index",
                ShowWhenUnauthorized = false,
                EmptySpanClass = "bi bi-list-nested-nav-menu"
            },
            new NavMenuEntry()
            {
                Href = "#Home",
                LinkText = "Home",
                ShowWhenAuthorized = false
            },
            new NavMenuEntry()
            {
                Href = "#Specs",
                LinkText = "Om Verktyget",
                ShowWhenAuthorized = false
            },
            new NavMenuEntry()
            {
                Href = "#Templates",
                LinkText = "Våra Mallar",
                ShowWhenAuthorized = false
            },
            new NavMenuEntry()
            {
                Href = "#Team",
                LinkText = "Möt Teamet",
                ShowWhenAuthorized = false
            },
            new NavMenuEntry()
            {
                Href = "#Zocom",
                LinkText = "ZoCom",
                ShowWhenAuthorized = false
            },
            new NavMenuEntry()
            {
                Href = "#Contact",
                LinkText = "Kontakta Oss",
                ShowWhenAuthorized = false
            },
            new NavMenuEntry()
            {
                Href = "Account/Login",
                LinkText = "Login / Register",
                ShowWhenAuthorized = false
            }
        }.ToImmutableList();
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        ConfigurationService.SetEntries(DefaultEntries, 1);
        ConfigurationService.DataUpdated += (StateHasChanged);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ConfigurationService.DataUpdated -= StateHasChanged;
    }


}