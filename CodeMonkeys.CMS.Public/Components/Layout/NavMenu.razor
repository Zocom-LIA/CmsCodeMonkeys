@implements IDisposable
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using CodeMonkeys.CMS.Public.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Collections.Immutable

<style>
    html {
        scroll-padding-top: 92px;
        overflow-y: scroll; /* Justera denna höjd baserat på höjden av din navigeringsmeny */
    }

    [id]::before {
        display: block;
        height: 25px; /* Justera denna höjd baserat på din navigeringsmeny */
        margin-top: -30px; /* Samma som höjden ovan */
    }
</style>
<header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="#section0">CODE MONKEYS</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mr-auto">
                    <AuthorizeView>
                        <Authorized>
                            @foreach (NavMenuEntry entry in ConfigurationService.NavMenuEntries)
                            {
                                if (entry.ShowWhenAuthorized)
                                {

                                    <li class="nav-item">
                                        <NavLink class="nav-link" href=@entry.Href style="color: white;">
                                            @if (entry.EmptySpanClass != null)
                                            {
                                                <span class=@entry.EmptySpanClass aria-hidden="true"></span>
                                            }
                                            @entry.LinkText
                                        </NavLink>
                                    </li>
                                }
                            }
                        </Authorized>
                        <NotAuthorized>
                            @foreach (NavMenuEntry entry in ConfigurationService.NavMenuEntries)
                            {
                                if (entry.ShowWhenUnauthorized)
                                {

                                    <li class="nav-item">
                                        <NavLink class="nav-link" href=@entry.Href style="color: white;">
                                            @if (entry.EmptySpanClass != null)
                                            {
                                                <span class=@entry.EmptySpanClass aria-hidden="true"></span>
                                            }
                                            @entry.LinkText
                                        </NavLink>
                                    </li>
                                }
                            }
                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
                <ul class="navbar-nav">
                    <AuthorizeView>
                        <Authorized>
                            <li class="nav-item">
                                <form action="Account/Logout" method="post" id="logout-form" class="form-inline">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                    <button type="submit" class="btn btn-link nav-link text-white">
                                        Logout <span class="bi bi-box-arrow-right" aria-hidden="true"></span>
                                    </button>
                                </form>
                            </li>
                        </Authorized>
                        <NotAuthorized>

                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
            </div>
        </div>
    </nav>
</header>

<!-- <header>
    <nav class="header-content">
        <div class="nav-item px-3">
            <h1 class="header-title">CODE MONKEYS</h1>
        </div>




        <AuthorizeView>
            <Authorized>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/" style="color: white;">
                        Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="sites" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Site Index
                    </NavLink>
                </div>


                <form action="Account/Logout" method="post" id="logout-form" class="d-inline">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="nav-link button-logout">
                        <span class="bi bi-box-arrow-right link-hover" aria-hidden="true">Logout</span>
                    </button>
                </form>
            </Authorized>
            <NotAuthorized>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="#section0" style="color: white;">
                        Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="#section1" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Om Verktyget
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="#section2" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Våra Mallar
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="#section3" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Möt Teamet
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="#section4" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> ZoCom
                    </NavLink>
                </div>

                 <div class="nav-item px-3">
                    <NavLink class="nav-link" href="#section5" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Kontakt
                    </NavLink>
                </div>

                <div class="nav-item ">
                    <NavLink class="nav-link" href="Account/Login" style="color: white;">
                        Login
                    </NavLink>
                </div>
                <div class="nav-item ">
                    <NavLink class="nav-link" href="Account/Register" style="color: white;">
                        Register
                    </NavLink>
                </div>

            </NotAuthorized>
        </AuthorizeView>
    </nav>
</header> -->
@code {
    [Inject] private MenuConfigurationService ConfigurationService { get; set; }
    private static ImmutableList<NavMenuEntry> DefaultEntries { get; set; } =
        new List<NavMenuEntry>()
        {
            new NavMenuEntry()
            {
                Href = "/",
                LinkText = "Home",
                ShowWhenAuthorized = true
            },
            new NavMenuEntry()
            {
                Href = "sites",
                LinkText = "Site Index",
                ShowWhenAuthorized = true,
                EmptySpanClass = "bi bi-list-nested-nav-menu"
            },
            new NavMenuEntry()
            {
                Href = "LayoutFlashy2",
                LinkText = "Test",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "#section0",
                LinkText = "Home",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "#section1",
                LinkText = "Om Verktyget",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "#section2",
                LinkText = "Våra Mallar",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "#section3",
                LinkText = "Möt Teamet",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "#section4",
                LinkText = "ZoCom",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "#section5",
                LinkText = "Kontakta Oss",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "Account/Login",
                LinkText = "Login",
                ShowWhenUnauthorized = true
            },
            new NavMenuEntry()
            {
                Href = "Account/Register",
                LinkText = "Register",
                ShowWhenUnauthorized = true
            }
        }.ToImmutableList();
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        ConfigurationService.SetEntries(DefaultEntries, 1);
        ConfigurationService.NotificationActions.Add(StateHasChanged);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


}