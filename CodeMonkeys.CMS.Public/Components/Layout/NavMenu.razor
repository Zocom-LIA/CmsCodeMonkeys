@implements IDisposable
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization


<header>
    <div class="header-content">
        <div class="nav-item px-3">
        <h1 class="header-title">CODE MONKEYS</h1>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" style="color: white;">
           Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="pagevisits" style="color: white;">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Page Visits
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="users" style="color: white;">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> User
                    </NavLink>
                </div>

                <form action="Account/Logout" method="post" id="logout-form" class="d-inline">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="nav-link button-logout">
                        <span class="bi bi-box-arrow-right link-hover" aria-hidden="true">Logout</span>
                    </button>
                </form>
            </Authorized>
         
            <NotAuthorized>
                <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Register" style="color: white;">
                            Register
                        </NavLink>
                    </div>

                <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Login" style="color: white;">
                            Login
                        </NavLink>
                    </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</header>



@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
